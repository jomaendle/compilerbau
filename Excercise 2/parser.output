Terminale, die in Grammatik unbenutzt sind

   ERROR


Grammatik

    0 $accept: start $end

    1 start: prog

    2 prog: %empty
    3     | prog def

    4 def: vardef
    5    | fundef

    6 vardef: type idlist SEMICOLON

    7 idlist: IDENT
    8       | idlist COMMA IDENT

    9 fundef: type IDENT OPENPAR params CLOSEPAR body

   10 type: STRING
   11     | INTEGER

   12 params: %empty
   13       | paramlist

   14 paramlist: param
   15          | paramlist COMMA param

   16 param: type IDENT

   17 body: OPENCURLY vardefs stmts CLOSECURLY

   18 vardefs: %empty
   19        | vardefs vardef

   20 stmts: %empty
   21      | stmts stmt

   22 stmt: while_stmt
   23     | if_stmt
   24     | ret_stmt
   25     | print_stmt
   26     | assign
   27     | funcall_stmt

   28 while_stmt: WHILE OPENPAR boolexpr CLOSEPAR body

   29 if_stmt: IF OPENPAR boolexpr CLOSEPAR body
   30        | IF OPENPAR boolexpr CLOSEPAR body ELSE body

   31 ret_stmt: RETURN expr SEMICOLON

   32 print_stmt: PRINT expr SEMICOLON

   33 assign: IDENT EQ expr SEMICOLON

   34 funcall_stmt: funcall SEMICOLON

   35 boolexpr: expr EQ expr
   36         | expr NEQ expr
   37         | expr LT expr
   38         | expr GT expr
   39         | expr LEQ expr
   40         | expr GEQ expr

   41 expr: funcall
   42     | INTLIT
   43     | IDENT
   44     | STRINGLIT
   45     | OPENPAR expr CLOSEPAR
   46     | expr PLUS expr
   47     | expr MINUS expr
   48     | expr MULT expr
   49     | expr DIV expr
   50     | MINUS expr

   51 funcall: IDENT OPENPAR args CLOSEPAR

   52 args: %empty
   53     | arglist

   54 arglist: expr
   55        | arglist COMMA expr


Terminale und die Regeln, in denen sie verwendet werden

$end (0) 0
error (256)
IDENT (258) 7 8 9 16 33 43 51
STRINGLIT (259) 44
INTLIT (260) 42
INTEGER (261) 11
STRING (262) 10
IF (263) 29 30
WHILE (264) 28
RETURN (265) 31
PRINT (266) 32
ELSE (267) 30
EQ (268) 33 35
NEQ (269) 36
LT (270) 37
GT (271) 38
LEQ (272) 39
GEQ (273) 40
PLUS (274) 46
MINUS (275) 47 50
MULT (276) 48
DIV (277) 49
UMINUS (278)
OPENPAR (279) 9 28 29 30 45 51
CLOSEPAR (280) 9 28 29 30 45 51
SEMICOLON (281) 6 31 32 33 34
COMMA (282) 8 15 55
OPENCURLY (283) 17
CLOSECURLY (284) 17
ERROR (285)


Nicht-Terminal und die Regeln, in denen sie verwendet werden

$accept (31)
    auf der linken Seite: 0
start (32)
    auf der linken Seite: 1, auf der rechten Seite: 0
prog (33)
    auf der linken Seite: 2 3, auf der rechten Seite: 1 3
def (34)
    auf der linken Seite: 4 5, auf der rechten Seite: 3
vardef (35)
    auf der linken Seite: 6, auf der rechten Seite: 4 19
idlist (36)
    auf der linken Seite: 7 8, auf der rechten Seite: 6 8
fundef (37)
    auf der linken Seite: 9, auf der rechten Seite: 5
type (38)
    auf der linken Seite: 10 11, auf der rechten Seite: 6 9 16
params (39)
    auf der linken Seite: 12 13, auf der rechten Seite: 9
paramlist (40)
    auf der linken Seite: 14 15, auf der rechten Seite: 13 15
param (41)
    auf der linken Seite: 16, auf der rechten Seite: 14 15
body (42)
    auf der linken Seite: 17, auf der rechten Seite: 9 28 29 30
vardefs (43)
    auf der linken Seite: 18 19, auf der rechten Seite: 17 19
stmts (44)
    auf der linken Seite: 20 21, auf der rechten Seite: 17 21
stmt (45)
    auf der linken Seite: 22 23 24 25 26 27, auf der rechten Seite:
    21
while_stmt (46)
    auf der linken Seite: 28, auf der rechten Seite: 22
if_stmt (47)
    auf der linken Seite: 29 30, auf der rechten Seite: 23
ret_stmt (48)
    auf der linken Seite: 31, auf der rechten Seite: 24
print_stmt (49)
    auf der linken Seite: 32, auf der rechten Seite: 25
assign (50)
    auf der linken Seite: 33, auf der rechten Seite: 26
funcall_stmt (51)
    auf der linken Seite: 34, auf der rechten Seite: 27
boolexpr (52)
    auf der linken Seite: 35 36 37 38 39 40, auf der rechten Seite:
    28 29 30
expr (53)
    auf der linken Seite: 41 42 43 44 45 46 47 48 49 50, auf der rechten Seite:
    31 32 33 35 36 37 38 39 40 45 46 47 48 49 50 54 55
funcall (54)
    auf der linken Seite: 51, auf der rechten Seite: 34 41
args (55)
    auf der linken Seite: 52 53, auf der rechten Seite: 51
arglist (56)
    auf der linken Seite: 54 55, auf der rechten Seite: 53 55


Zustand 0

    0 $accept: . start $end

    $default  reduziere mit Regel 2 (prog)

    start  gehe zu Zustand 1 über
    prog   gehe zu Zustand 2 über


Zustand 1

    0 $accept: start . $end

    $end  schiebe und gehe zu Zustand 3 über


Zustand 2

    1 start: prog .
    3 prog: prog . def

    INTEGER  schiebe und gehe zu Zustand 4 über
    STRING   schiebe und gehe zu Zustand 5 über

    $default  reduziere mit Regel 1 (start)

    def     gehe zu Zustand 6 über
    vardef  gehe zu Zustand 7 über
    fundef  gehe zu Zustand 8 über
    type    gehe zu Zustand 9 über


Zustand 3

    0 $accept: start $end .

    $default  annehmen


Zustand 4

   11 type: INTEGER .

    $default  reduziere mit Regel 11 (type)


Zustand 5

   10 type: STRING .

    $default  reduziere mit Regel 10 (type)


Zustand 6

    3 prog: prog def .

    $default  reduziere mit Regel 3 (prog)


Zustand 7

    4 def: vardef .

    $default  reduziere mit Regel 4 (def)


Zustand 8

    5 def: fundef .

    $default  reduziere mit Regel 5 (def)


Zustand 9

    6 vardef: type . idlist SEMICOLON
    9 fundef: type . IDENT OPENPAR params CLOSEPAR body

    IDENT  schiebe und gehe zu Zustand 10 über

    idlist  gehe zu Zustand 11 über


Zustand 10

    7 idlist: IDENT .
    9 fundef: type IDENT . OPENPAR params CLOSEPAR body

    OPENPAR  schiebe und gehe zu Zustand 12 über

    $default  reduziere mit Regel 7 (idlist)


Zustand 11

    6 vardef: type idlist . SEMICOLON
    8 idlist: idlist . COMMA IDENT

    SEMICOLON  schiebe und gehe zu Zustand 13 über
    COMMA      schiebe und gehe zu Zustand 14 über


Zustand 12

    9 fundef: type IDENT OPENPAR . params CLOSEPAR body

    INTEGER  schiebe und gehe zu Zustand 4 über
    STRING   schiebe und gehe zu Zustand 5 über

    $default  reduziere mit Regel 12 (params)

    type       gehe zu Zustand 15 über
    params     gehe zu Zustand 16 über
    paramlist  gehe zu Zustand 17 über
    param      gehe zu Zustand 18 über


Zustand 13

    6 vardef: type idlist SEMICOLON .

    $default  reduziere mit Regel 6 (vardef)


Zustand 14

    8 idlist: idlist COMMA . IDENT

    IDENT  schiebe und gehe zu Zustand 19 über


Zustand 15

   16 param: type . IDENT

    IDENT  schiebe und gehe zu Zustand 20 über


Zustand 16

    9 fundef: type IDENT OPENPAR params . CLOSEPAR body

    CLOSEPAR  schiebe und gehe zu Zustand 21 über


Zustand 17

   13 params: paramlist .
   15 paramlist: paramlist . COMMA param

    COMMA  schiebe und gehe zu Zustand 22 über

    $default  reduziere mit Regel 13 (params)


Zustand 18

   14 paramlist: param .

    $default  reduziere mit Regel 14 (paramlist)


Zustand 19

    8 idlist: idlist COMMA IDENT .

    $default  reduziere mit Regel 8 (idlist)


Zustand 20

   16 param: type IDENT .

    $default  reduziere mit Regel 16 (param)


Zustand 21

    9 fundef: type IDENT OPENPAR params CLOSEPAR . body

    OPENCURLY  schiebe und gehe zu Zustand 23 über

    body  gehe zu Zustand 24 über


Zustand 22

   15 paramlist: paramlist COMMA . param

    INTEGER  schiebe und gehe zu Zustand 4 über
    STRING   schiebe und gehe zu Zustand 5 über

    type   gehe zu Zustand 15 über
    param  gehe zu Zustand 25 über


Zustand 23

   17 body: OPENCURLY . vardefs stmts CLOSECURLY

    $default  reduziere mit Regel 18 (vardefs)

    vardefs  gehe zu Zustand 26 über


Zustand 24

    9 fundef: type IDENT OPENPAR params CLOSEPAR body .

    $default  reduziere mit Regel 9 (fundef)


Zustand 25

   15 paramlist: paramlist COMMA param .

    $default  reduziere mit Regel 15 (paramlist)


Zustand 26

   17 body: OPENCURLY vardefs . stmts CLOSECURLY
   19 vardefs: vardefs . vardef

    INTEGER  schiebe und gehe zu Zustand 4 über
    STRING   schiebe und gehe zu Zustand 5 über

    $default  reduziere mit Regel 20 (stmts)

    vardef  gehe zu Zustand 27 über
    type    gehe zu Zustand 28 über
    stmts   gehe zu Zustand 29 über


Zustand 27

   19 vardefs: vardefs vardef .

    $default  reduziere mit Regel 19 (vardefs)


Zustand 28

    6 vardef: type . idlist SEMICOLON

    IDENT  schiebe und gehe zu Zustand 30 über

    idlist  gehe zu Zustand 11 über


Zustand 29

   17 body: OPENCURLY vardefs stmts . CLOSECURLY
   21 stmts: stmts . stmt

    IDENT       schiebe und gehe zu Zustand 31 über
    IF          schiebe und gehe zu Zustand 32 über
    WHILE       schiebe und gehe zu Zustand 33 über
    RETURN      schiebe und gehe zu Zustand 34 über
    PRINT       schiebe und gehe zu Zustand 35 über
    CLOSECURLY  schiebe und gehe zu Zustand 36 über

    stmt          gehe zu Zustand 37 über
    while_stmt    gehe zu Zustand 38 über
    if_stmt       gehe zu Zustand 39 über
    ret_stmt      gehe zu Zustand 40 über
    print_stmt    gehe zu Zustand 41 über
    assign        gehe zu Zustand 42 über
    funcall_stmt  gehe zu Zustand 43 über
    funcall       gehe zu Zustand 44 über


Zustand 30

    7 idlist: IDENT .

    $default  reduziere mit Regel 7 (idlist)


Zustand 31

   33 assign: IDENT . EQ expr SEMICOLON
   51 funcall: IDENT . OPENPAR args CLOSEPAR

    EQ       schiebe und gehe zu Zustand 45 über
    OPENPAR  schiebe und gehe zu Zustand 46 über


Zustand 32

   29 if_stmt: IF . OPENPAR boolexpr CLOSEPAR body
   30        | IF . OPENPAR boolexpr CLOSEPAR body ELSE body

    OPENPAR  schiebe und gehe zu Zustand 47 über


Zustand 33

   28 while_stmt: WHILE . OPENPAR boolexpr CLOSEPAR body

    OPENPAR  schiebe und gehe zu Zustand 48 über


Zustand 34

   31 ret_stmt: RETURN . expr SEMICOLON

    IDENT      schiebe und gehe zu Zustand 49 über
    STRINGLIT  schiebe und gehe zu Zustand 50 über
    INTLIT     schiebe und gehe zu Zustand 51 über
    MINUS      schiebe und gehe zu Zustand 52 über
    OPENPAR    schiebe und gehe zu Zustand 53 über

    expr     gehe zu Zustand 54 über
    funcall  gehe zu Zustand 55 über


Zustand 35

   32 print_stmt: PRINT . expr SEMICOLON

    IDENT      schiebe und gehe zu Zustand 49 über
    STRINGLIT  schiebe und gehe zu Zustand 50 über
    INTLIT     schiebe und gehe zu Zustand 51 über
    MINUS      schiebe und gehe zu Zustand 52 über
    OPENPAR    schiebe und gehe zu Zustand 53 über

    expr     gehe zu Zustand 56 über
    funcall  gehe zu Zustand 55 über


Zustand 36

   17 body: OPENCURLY vardefs stmts CLOSECURLY .

    $default  reduziere mit Regel 17 (body)


Zustand 37

   21 stmts: stmts stmt .

    $default  reduziere mit Regel 21 (stmts)


Zustand 38

   22 stmt: while_stmt .

    $default  reduziere mit Regel 22 (stmt)


Zustand 39

   23 stmt: if_stmt .

    $default  reduziere mit Regel 23 (stmt)


Zustand 40

   24 stmt: ret_stmt .

    $default  reduziere mit Regel 24 (stmt)


Zustand 41

   25 stmt: print_stmt .

    $default  reduziere mit Regel 25 (stmt)


Zustand 42

   26 stmt: assign .

    $default  reduziere mit Regel 26 (stmt)


Zustand 43

   27 stmt: funcall_stmt .

    $default  reduziere mit Regel 27 (stmt)


Zustand 44

   34 funcall_stmt: funcall . SEMICOLON

    SEMICOLON  schiebe und gehe zu Zustand 57 über


Zustand 45

   33 assign: IDENT EQ . expr SEMICOLON

    IDENT      schiebe und gehe zu Zustand 49 über
    STRINGLIT  schiebe und gehe zu Zustand 50 über
    INTLIT     schiebe und gehe zu Zustand 51 über
    MINUS      schiebe und gehe zu Zustand 52 über
    OPENPAR    schiebe und gehe zu Zustand 53 über

    expr     gehe zu Zustand 58 über
    funcall  gehe zu Zustand 55 über


Zustand 46

   51 funcall: IDENT OPENPAR . args CLOSEPAR

    IDENT      schiebe und gehe zu Zustand 49 über
    STRINGLIT  schiebe und gehe zu Zustand 50 über
    INTLIT     schiebe und gehe zu Zustand 51 über
    MINUS      schiebe und gehe zu Zustand 52 über
    OPENPAR    schiebe und gehe zu Zustand 53 über

    $default  reduziere mit Regel 52 (args)

    expr     gehe zu Zustand 59 über
    funcall  gehe zu Zustand 55 über
    args     gehe zu Zustand 60 über
    arglist  gehe zu Zustand 61 über


Zustand 47

   29 if_stmt: IF OPENPAR . boolexpr CLOSEPAR body
   30        | IF OPENPAR . boolexpr CLOSEPAR body ELSE body

    IDENT      schiebe und gehe zu Zustand 49 über
    STRINGLIT  schiebe und gehe zu Zustand 50 über
    INTLIT     schiebe und gehe zu Zustand 51 über
    MINUS      schiebe und gehe zu Zustand 52 über
    OPENPAR    schiebe und gehe zu Zustand 53 über

    boolexpr  gehe zu Zustand 62 über
    expr      gehe zu Zustand 63 über
    funcall   gehe zu Zustand 55 über


Zustand 48

   28 while_stmt: WHILE OPENPAR . boolexpr CLOSEPAR body

    IDENT      schiebe und gehe zu Zustand 49 über
    STRINGLIT  schiebe und gehe zu Zustand 50 über
    INTLIT     schiebe und gehe zu Zustand 51 über
    MINUS      schiebe und gehe zu Zustand 52 über
    OPENPAR    schiebe und gehe zu Zustand 53 über

    boolexpr  gehe zu Zustand 64 über
    expr      gehe zu Zustand 63 über
    funcall   gehe zu Zustand 55 über


Zustand 49

   43 expr: IDENT .
   51 funcall: IDENT . OPENPAR args CLOSEPAR

    OPENPAR  schiebe und gehe zu Zustand 46 über

    $default  reduziere mit Regel 43 (expr)


Zustand 50

   44 expr: STRINGLIT .

    $default  reduziere mit Regel 44 (expr)


Zustand 51

   42 expr: INTLIT .

    $default  reduziere mit Regel 42 (expr)


Zustand 52

   50 expr: MINUS . expr

    IDENT      schiebe und gehe zu Zustand 49 über
    STRINGLIT  schiebe und gehe zu Zustand 50 über
    INTLIT     schiebe und gehe zu Zustand 51 über
    MINUS      schiebe und gehe zu Zustand 52 über
    OPENPAR    schiebe und gehe zu Zustand 53 über

    expr     gehe zu Zustand 65 über
    funcall  gehe zu Zustand 55 über


Zustand 53

   45 expr: OPENPAR . expr CLOSEPAR

    IDENT      schiebe und gehe zu Zustand 49 über
    STRINGLIT  schiebe und gehe zu Zustand 50 über
    INTLIT     schiebe und gehe zu Zustand 51 über
    MINUS      schiebe und gehe zu Zustand 52 über
    OPENPAR    schiebe und gehe zu Zustand 53 über

    expr     gehe zu Zustand 66 über
    funcall  gehe zu Zustand 55 über


Zustand 54

   31 ret_stmt: RETURN expr . SEMICOLON
   46 expr: expr . PLUS expr
   47     | expr . MINUS expr
   48     | expr . MULT expr
   49     | expr . DIV expr

    PLUS       schiebe und gehe zu Zustand 67 über
    MINUS      schiebe und gehe zu Zustand 68 über
    MULT       schiebe und gehe zu Zustand 69 über
    DIV        schiebe und gehe zu Zustand 70 über
    SEMICOLON  schiebe und gehe zu Zustand 71 über


Zustand 55

   41 expr: funcall .

    $default  reduziere mit Regel 41 (expr)


Zustand 56

   32 print_stmt: PRINT expr . SEMICOLON
   46 expr: expr . PLUS expr
   47     | expr . MINUS expr
   48     | expr . MULT expr
   49     | expr . DIV expr

    PLUS       schiebe und gehe zu Zustand 67 über
    MINUS      schiebe und gehe zu Zustand 68 über
    MULT       schiebe und gehe zu Zustand 69 über
    DIV        schiebe und gehe zu Zustand 70 über
    SEMICOLON  schiebe und gehe zu Zustand 72 über


Zustand 57

   34 funcall_stmt: funcall SEMICOLON .

    $default  reduziere mit Regel 34 (funcall_stmt)


Zustand 58

   33 assign: IDENT EQ expr . SEMICOLON
   46 expr: expr . PLUS expr
   47     | expr . MINUS expr
   48     | expr . MULT expr
   49     | expr . DIV expr

    PLUS       schiebe und gehe zu Zustand 67 über
    MINUS      schiebe und gehe zu Zustand 68 über
    MULT       schiebe und gehe zu Zustand 69 über
    DIV        schiebe und gehe zu Zustand 70 über
    SEMICOLON  schiebe und gehe zu Zustand 73 über


Zustand 59

   46 expr: expr . PLUS expr
   47     | expr . MINUS expr
   48     | expr . MULT expr
   49     | expr . DIV expr
   54 arglist: expr .

    PLUS   schiebe und gehe zu Zustand 67 über
    MINUS  schiebe und gehe zu Zustand 68 über
    MULT   schiebe und gehe zu Zustand 69 über
    DIV    schiebe und gehe zu Zustand 70 über

    $default  reduziere mit Regel 54 (arglist)


Zustand 60

   51 funcall: IDENT OPENPAR args . CLOSEPAR

    CLOSEPAR  schiebe und gehe zu Zustand 74 über


Zustand 61

   53 args: arglist .
   55 arglist: arglist . COMMA expr

    COMMA  schiebe und gehe zu Zustand 75 über

    $default  reduziere mit Regel 53 (args)


Zustand 62

   29 if_stmt: IF OPENPAR boolexpr . CLOSEPAR body
   30        | IF OPENPAR boolexpr . CLOSEPAR body ELSE body

    CLOSEPAR  schiebe und gehe zu Zustand 76 über


Zustand 63

   35 boolexpr: expr . EQ expr
   36         | expr . NEQ expr
   37         | expr . LT expr
   38         | expr . GT expr
   39         | expr . LEQ expr
   40         | expr . GEQ expr
   46 expr: expr . PLUS expr
   47     | expr . MINUS expr
   48     | expr . MULT expr
   49     | expr . DIV expr

    EQ     schiebe und gehe zu Zustand 77 über
    NEQ    schiebe und gehe zu Zustand 78 über
    LT     schiebe und gehe zu Zustand 79 über
    GT     schiebe und gehe zu Zustand 80 über
    LEQ    schiebe und gehe zu Zustand 81 über
    GEQ    schiebe und gehe zu Zustand 82 über
    PLUS   schiebe und gehe zu Zustand 67 über
    MINUS  schiebe und gehe zu Zustand 68 über
    MULT   schiebe und gehe zu Zustand 69 über
    DIV    schiebe und gehe zu Zustand 70 über


Zustand 64

   28 while_stmt: WHILE OPENPAR boolexpr . CLOSEPAR body

    CLOSEPAR  schiebe und gehe zu Zustand 83 über


Zustand 65

   46 expr: expr . PLUS expr
   47     | expr . MINUS expr
   48     | expr . MULT expr
   49     | expr . DIV expr
   50     | MINUS expr .

    $default  reduziere mit Regel 50 (expr)


Zustand 66

   45 expr: OPENPAR expr . CLOSEPAR
   46     | expr . PLUS expr
   47     | expr . MINUS expr
   48     | expr . MULT expr
   49     | expr . DIV expr

    PLUS      schiebe und gehe zu Zustand 67 über
    MINUS     schiebe und gehe zu Zustand 68 über
    MULT      schiebe und gehe zu Zustand 69 über
    DIV       schiebe und gehe zu Zustand 70 über
    CLOSEPAR  schiebe und gehe zu Zustand 84 über


Zustand 67

   46 expr: expr PLUS . expr

    IDENT      schiebe und gehe zu Zustand 49 über
    STRINGLIT  schiebe und gehe zu Zustand 50 über
    INTLIT     schiebe und gehe zu Zustand 51 über
    MINUS      schiebe und gehe zu Zustand 52 über
    OPENPAR    schiebe und gehe zu Zustand 53 über

    expr     gehe zu Zustand 85 über
    funcall  gehe zu Zustand 55 über


Zustand 68

   47 expr: expr MINUS . expr

    IDENT      schiebe und gehe zu Zustand 49 über
    STRINGLIT  schiebe und gehe zu Zustand 50 über
    INTLIT     schiebe und gehe zu Zustand 51 über
    MINUS      schiebe und gehe zu Zustand 52 über
    OPENPAR    schiebe und gehe zu Zustand 53 über

    expr     gehe zu Zustand 86 über
    funcall  gehe zu Zustand 55 über


Zustand 69

   48 expr: expr MULT . expr

    IDENT      schiebe und gehe zu Zustand 49 über
    STRINGLIT  schiebe und gehe zu Zustand 50 über
    INTLIT     schiebe und gehe zu Zustand 51 über
    MINUS      schiebe und gehe zu Zustand 52 über
    OPENPAR    schiebe und gehe zu Zustand 53 über

    expr     gehe zu Zustand 87 über
    funcall  gehe zu Zustand 55 über


Zustand 70

   49 expr: expr DIV . expr

    IDENT      schiebe und gehe zu Zustand 49 über
    STRINGLIT  schiebe und gehe zu Zustand 50 über
    INTLIT     schiebe und gehe zu Zustand 51 über
    MINUS      schiebe und gehe zu Zustand 52 über
    OPENPAR    schiebe und gehe zu Zustand 53 über

    expr     gehe zu Zustand 88 über
    funcall  gehe zu Zustand 55 über


Zustand 71

   31 ret_stmt: RETURN expr SEMICOLON .

    $default  reduziere mit Regel 31 (ret_stmt)


Zustand 72

   32 print_stmt: PRINT expr SEMICOLON .

    $default  reduziere mit Regel 32 (print_stmt)


Zustand 73

   33 assign: IDENT EQ expr SEMICOLON .

    $default  reduziere mit Regel 33 (assign)


Zustand 74

   51 funcall: IDENT OPENPAR args CLOSEPAR .

    $default  reduziere mit Regel 51 (funcall)


Zustand 75

   55 arglist: arglist COMMA . expr

    IDENT      schiebe und gehe zu Zustand 49 über
    STRINGLIT  schiebe und gehe zu Zustand 50 über
    INTLIT     schiebe und gehe zu Zustand 51 über
    MINUS      schiebe und gehe zu Zustand 52 über
    OPENPAR    schiebe und gehe zu Zustand 53 über

    expr     gehe zu Zustand 89 über
    funcall  gehe zu Zustand 55 über


Zustand 76

   29 if_stmt: IF OPENPAR boolexpr CLOSEPAR . body
   30        | IF OPENPAR boolexpr CLOSEPAR . body ELSE body

    OPENCURLY  schiebe und gehe zu Zustand 23 über

    body  gehe zu Zustand 90 über


Zustand 77

   35 boolexpr: expr EQ . expr

    IDENT      schiebe und gehe zu Zustand 49 über
    STRINGLIT  schiebe und gehe zu Zustand 50 über
    INTLIT     schiebe und gehe zu Zustand 51 über
    MINUS      schiebe und gehe zu Zustand 52 über
    OPENPAR    schiebe und gehe zu Zustand 53 über

    expr     gehe zu Zustand 91 über
    funcall  gehe zu Zustand 55 über


Zustand 78

   36 boolexpr: expr NEQ . expr

    IDENT      schiebe und gehe zu Zustand 49 über
    STRINGLIT  schiebe und gehe zu Zustand 50 über
    INTLIT     schiebe und gehe zu Zustand 51 über
    MINUS      schiebe und gehe zu Zustand 52 über
    OPENPAR    schiebe und gehe zu Zustand 53 über

    expr     gehe zu Zustand 92 über
    funcall  gehe zu Zustand 55 über


Zustand 79

   37 boolexpr: expr LT . expr

    IDENT      schiebe und gehe zu Zustand 49 über
    STRINGLIT  schiebe und gehe zu Zustand 50 über
    INTLIT     schiebe und gehe zu Zustand 51 über
    MINUS      schiebe und gehe zu Zustand 52 über
    OPENPAR    schiebe und gehe zu Zustand 53 über

    expr     gehe zu Zustand 93 über
    funcall  gehe zu Zustand 55 über


Zustand 80

   38 boolexpr: expr GT . expr

    IDENT      schiebe und gehe zu Zustand 49 über
    STRINGLIT  schiebe und gehe zu Zustand 50 über
    INTLIT     schiebe und gehe zu Zustand 51 über
    MINUS      schiebe und gehe zu Zustand 52 über
    OPENPAR    schiebe und gehe zu Zustand 53 über

    expr     gehe zu Zustand 94 über
    funcall  gehe zu Zustand 55 über


Zustand 81

   39 boolexpr: expr LEQ . expr

    IDENT      schiebe und gehe zu Zustand 49 über
    STRINGLIT  schiebe und gehe zu Zustand 50 über
    INTLIT     schiebe und gehe zu Zustand 51 über
    MINUS      schiebe und gehe zu Zustand 52 über
    OPENPAR    schiebe und gehe zu Zustand 53 über

    expr     gehe zu Zustand 95 über
    funcall  gehe zu Zustand 55 über


Zustand 82

   40 boolexpr: expr GEQ . expr

    IDENT      schiebe und gehe zu Zustand 49 über
    STRINGLIT  schiebe und gehe zu Zustand 50 über
    INTLIT     schiebe und gehe zu Zustand 51 über
    MINUS      schiebe und gehe zu Zustand 52 über
    OPENPAR    schiebe und gehe zu Zustand 53 über

    expr     gehe zu Zustand 96 über
    funcall  gehe zu Zustand 55 über


Zustand 83

   28 while_stmt: WHILE OPENPAR boolexpr CLOSEPAR . body

    OPENCURLY  schiebe und gehe zu Zustand 23 über

    body  gehe zu Zustand 97 über


Zustand 84

   45 expr: OPENPAR expr CLOSEPAR .

    $default  reduziere mit Regel 45 (expr)


Zustand 85

   46 expr: expr . PLUS expr
   46     | expr PLUS expr .
   47     | expr . MINUS expr
   48     | expr . MULT expr
   49     | expr . DIV expr

    MULT  schiebe und gehe zu Zustand 69 über
    DIV   schiebe und gehe zu Zustand 70 über

    $default  reduziere mit Regel 46 (expr)


Zustand 86

   46 expr: expr . PLUS expr
   47     | expr . MINUS expr
   47     | expr MINUS expr .
   48     | expr . MULT expr
   49     | expr . DIV expr

    MULT  schiebe und gehe zu Zustand 69 über
    DIV   schiebe und gehe zu Zustand 70 über

    $default  reduziere mit Regel 47 (expr)


Zustand 87

   46 expr: expr . PLUS expr
   47     | expr . MINUS expr
   48     | expr . MULT expr
   48     | expr MULT expr .
   49     | expr . DIV expr

    $default  reduziere mit Regel 48 (expr)


Zustand 88

   46 expr: expr . PLUS expr
   47     | expr . MINUS expr
   48     | expr . MULT expr
   49     | expr . DIV expr
   49     | expr DIV expr .

    $default  reduziere mit Regel 49 (expr)


Zustand 89

   46 expr: expr . PLUS expr
   47     | expr . MINUS expr
   48     | expr . MULT expr
   49     | expr . DIV expr
   55 arglist: arglist COMMA expr .

    PLUS   schiebe und gehe zu Zustand 67 über
    MINUS  schiebe und gehe zu Zustand 68 über
    MULT   schiebe und gehe zu Zustand 69 über
    DIV    schiebe und gehe zu Zustand 70 über

    $default  reduziere mit Regel 55 (arglist)


Zustand 90

   29 if_stmt: IF OPENPAR boolexpr CLOSEPAR body .
   30        | IF OPENPAR boolexpr CLOSEPAR body . ELSE body

    ELSE  schiebe und gehe zu Zustand 98 über

    $default  reduziere mit Regel 29 (if_stmt)


Zustand 91

   35 boolexpr: expr EQ expr .
   46 expr: expr . PLUS expr
   47     | expr . MINUS expr
   48     | expr . MULT expr
   49     | expr . DIV expr

    PLUS   schiebe und gehe zu Zustand 67 über
    MINUS  schiebe und gehe zu Zustand 68 über
    MULT   schiebe und gehe zu Zustand 69 über
    DIV    schiebe und gehe zu Zustand 70 über

    $default  reduziere mit Regel 35 (boolexpr)


Zustand 92

   36 boolexpr: expr NEQ expr .
   46 expr: expr . PLUS expr
   47     | expr . MINUS expr
   48     | expr . MULT expr
   49     | expr . DIV expr

    PLUS   schiebe und gehe zu Zustand 67 über
    MINUS  schiebe und gehe zu Zustand 68 über
    MULT   schiebe und gehe zu Zustand 69 über
    DIV    schiebe und gehe zu Zustand 70 über

    $default  reduziere mit Regel 36 (boolexpr)


Zustand 93

   37 boolexpr: expr LT expr .
   46 expr: expr . PLUS expr
   47     | expr . MINUS expr
   48     | expr . MULT expr
   49     | expr . DIV expr

    PLUS   schiebe und gehe zu Zustand 67 über
    MINUS  schiebe und gehe zu Zustand 68 über
    MULT   schiebe und gehe zu Zustand 69 über
    DIV    schiebe und gehe zu Zustand 70 über

    $default  reduziere mit Regel 37 (boolexpr)


Zustand 94

   38 boolexpr: expr GT expr .
   46 expr: expr . PLUS expr
   47     | expr . MINUS expr
   48     | expr . MULT expr
   49     | expr . DIV expr

    PLUS   schiebe und gehe zu Zustand 67 über
    MINUS  schiebe und gehe zu Zustand 68 über
    MULT   schiebe und gehe zu Zustand 69 über
    DIV    schiebe und gehe zu Zustand 70 über

    $default  reduziere mit Regel 38 (boolexpr)


Zustand 95

   39 boolexpr: expr LEQ expr .
   46 expr: expr . PLUS expr
   47     | expr . MINUS expr
   48     | expr . MULT expr
   49     | expr . DIV expr

    PLUS   schiebe und gehe zu Zustand 67 über
    MINUS  schiebe und gehe zu Zustand 68 über
    MULT   schiebe und gehe zu Zustand 69 über
    DIV    schiebe und gehe zu Zustand 70 über

    $default  reduziere mit Regel 39 (boolexpr)


Zustand 96

   40 boolexpr: expr GEQ expr .
   46 expr: expr . PLUS expr
   47     | expr . MINUS expr
   48     | expr . MULT expr
   49     | expr . DIV expr

    PLUS   schiebe und gehe zu Zustand 67 über
    MINUS  schiebe und gehe zu Zustand 68 über
    MULT   schiebe und gehe zu Zustand 69 über
    DIV    schiebe und gehe zu Zustand 70 über

    $default  reduziere mit Regel 40 (boolexpr)


Zustand 97

   28 while_stmt: WHILE OPENPAR boolexpr CLOSEPAR body .

    $default  reduziere mit Regel 28 (while_stmt)


Zustand 98

   30 if_stmt: IF OPENPAR boolexpr CLOSEPAR body ELSE . body

    OPENCURLY  schiebe und gehe zu Zustand 23 über

    body  gehe zu Zustand 99 über


Zustand 99

   30 if_stmt: IF OPENPAR boolexpr CLOSEPAR body ELSE body .

    $default  reduziere mit Regel 30 (if_stmt)
